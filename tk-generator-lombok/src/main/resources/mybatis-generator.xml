<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- 引入数据库连接配置 -->
    <!-- <properties resource="jdbc.properties"/> -->
    <!-- 数据库驱动 -->
    <classPathEntry location="D:\Tools\apache\maven\apache-maven-3.8.1\repository\org\postgresql\postgresql\42.3.1\postgresql-42.3.1.jar"/>
    <!--mysql 连接数据库jar 这里选择自己本地位置-->
    <context id="MysqlContext" targetRuntime="MyBatis3">
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>
        <!-- 文件编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 指定生成 Mapper 的继承模板 -->
        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <!-- 配置Mapper需要集成的基类，这边是我重新封装的Mapper类，如果不需要则配置默认的都Mapper -->
            <property name="mappers" value="com.lzy.common.BaseMapper"/>
            <!--是否强制生成注解，默认 false，如果设置为 true，不管数据库名和字段名是否一致，都会生成注解（包含 @Table 和 @Column）。-->
            <property name="forceAnnotation" value="false"/>
        </plugin>

        <!-- 生成的POJO实现java.io.Serializable接口 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- 支持lombok注释, 去掉set,get方法-->
        <plugin type="org.mybatis.generator.plugins.LombokPlugin" >
            <property name="hasLombok" value="true"/>
        </plugin>

        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库链接URL，用户名、密码 -->
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://localhost:5432/db_test1"
                        userId="postgres"
                        password="root">
            <!--  设置可以获取tables remarks信息 -->
            <property name="useInformationSchema" value="true"/>
            <!-- 设置可以获取remarks信息 -->
            <property name="remarks" value="true"/>
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
             targetPackage     指定生成的model生成所在的包名
             targetProject     指定在该项目下所在的路径
         -->
        <!-- 生成模型的包名和位置-->
        <javaModelGenerator targetPackage="com.lzy.pojo" targetProject="./src/main/java">
            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否对类CHAR类型的列的数据进行trim操作 -->
            <property name="trimStrings" value="false"/>
            <!-- 建立的Model对象是否不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>

            <!-- 设置一个根对象，
            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
               1，属性名相同，类型相同，有相同的getter/setter方法；（不好使）
            -->
            <!-- <property name="rootClass" value="com.lzy.base.BaseEntity"/> -->

        </javaModelGenerator>
        <!-- 生成映射文件mapper的包名和位置-->
        <sqlMapGenerator targetPackage="com.lzy.mapper" targetProject="./src/main/java">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                 type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                 type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                 type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
         -->
        <!-- 生成mapper对应的xml和位置-->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.lzy.mapper" targetProject="./src/main/java">
            <property name="enableSubPackages" value="false"/>
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 -->
            <!-- <property name="rootInterface" value="com.urthink.upfs.springbootmybatis.base.BaseMapper"/>-->
        </javaClientGenerator>
        <!-- 要生成哪些表-->
        <!--<table schema="" tableName="sys_organization" domainObjectName="Organization" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
                <generatedKey column="id" identity="true" sqlStatement="Mysql"/>
                <columnOverride column="???" property="???" />
            </table>-->
        <!-- 指定数据表-->
        <!-- 因为TkMybatis已经支持基础操作，因此不再需要对应Example方法，所以去掉生成 -->
        <table  tableName="user1" domainObjectName="User" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false"></table>

    </context>
</generatorConfiguration>